Liskov Substitution Principle(LSP) 里氏替換原則
(Subtypes must be substitutable for their base types.)

在一個系統中，子類別應該要可以替換掉父類別，而不會影響程式架構，
當子類別實作繼承了介面或父類別，那麼只要在程式中出現該介面或類別，都要可以用該子類別來替換，
要能做到替換而不出現任何錯誤或異常，但反過來則不行，子類別出現的地方，父類別未必能使用。

IAvengers : 設定執行任務方法的介面
CaptainAmerica : 繼承介面實作方法的類別
IronMan : 繼承介面實作方法的類別
Task : 實現替換原則的類別
Implent 資料夾 -> Implent_LSP : 實作 里氏替換原則 的範例專案

遵守原則的要領
為避免發生錯誤或異常，實作可以參考要領，如下：

子類別必須完全實作父類別的方法
子類別可以有屬於自己的屬性和方法

如果子類別不能完整實作父類別的方法，或者父類別的某些方法在子類別發生大變化，
則建議不使用繼承關係，改用依賴、聚集、組合等關係代替繼承。

優點
里氏替換原則的重點是要增加程式的強健性，讓版本升級的時候也能有很好的兼容性。
比方說：子類別增加或修改，並不影響其他子類別，這正是強健性的特質。

里氏替換原則的核心思想就是繼承
繼承的優點:
1.提高程式碼的重用性。
2.程式碼共享，減少建立類別的成本，每個子類別都有父類別的方法和屬性。
3.提高程式碼可擴充性，可維護性。

繼承的缺點:
1.繼承是入侵性的(只要繼承,就必須擁有父類別的所有屬性與方法);
2.降低了程式碼的靈活性(子類別擁有了父類別的屬性、方法,會增多約束);
3.增強了耦合性(當父類別的屬性、方法被修改時,必需要考慮子類別的修改)。

參考資料 https://ithelp.ithome.com.tw/articles/10192317
		 https://www.itread01.com/p/1339391.html