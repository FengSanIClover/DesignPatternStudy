Open/Close Principle (OCP) 開放/封閉原則
(Software entities (class, modules, functions, etc.) should be open for extension, but closed for modification.)
(軟體實體應該對擴充開放，對修改封閉)

軟體應該要保留彈性，可以擴充新功能，藉由增加新的程式碼來擴充系統的功能，而不是藉由修改原本已經存在的程式碼來擴充系統的功能。
當需求有異動時，要如何在不變動現在正常運行的程式碼，藉由繼承、相依性注入等方式，增加新的程式碼，以實作新的需求。
假若為了新需求，去修改了原本的程式中的某一個函數，可能會造成其他呼叫使用該函數的的功能，出現非預期的錯誤。

以車來說，要開車在雪地上行駛，可以為輪胎綁上雪鍊(擴充開放)，而不是將整個輪胎換掉(修改封閉)


NationalTaxAdministration : 尚未實現開放/封閉原則的類別
INotify : 抽離方法的介面
Letter : 繼承介面實作方法的類別 
TextMessage : 繼承介面實作方法的類別 
ReNationalTaxAdministration : 實現開放/封閉原則的類別

對擴充開放：新功能是用寫新的程式碼擴充出來的。
對修改封閉：新功能不用修改現有程式碼。

優點
最大的好處正是降低修改風險。
前面的修改，是修改既有程式碼，因此有可能破壞原有功能；
後面重構後的修改，只有新增程式碼，舊有程式因為沒修改，所以理論上問題當然會比較少。

潛在問題
擴展的情境並不一定在設計階段就會發現，常常要到了需求調整才會知道，像上面的範例正是如此，
透過重構讓設計可以更符合需求。

參考資料 https://ithelp.ithome.com.tw/articles/10192105

