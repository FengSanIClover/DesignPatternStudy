1.什麼是設計模式
	所謂的設計模式是如何解決一些重複性問題並經過分類編輯的經驗總結。
	每個模式都描述了一個不斷發生在我們周遭的問題，然後描述該問題的核心解法，
	於是你便可以一再使用該解法，而無須對同樣的事情做兩次工。

2.為什麼要用設計模式
	對於團隊工作來說，可以方便系統設計師規劃後交付實作，對於系統耦合來說，
	可以解決中大型系統已知的耦合問題，抽象出更理想的設計，讓程式碼更容易維護並且維持軟體的可擴充性。

3.何謂低耦合(Coupling)，高內聚(Cohesion)
	耦合:簡單來說，就是兩個模組間的關連性或相依性。
	當兩模組間的相依性越高，那它們的耦合性越高，稱之為高耦合。反之，則謂之低耦合。
	在高耦合的情況下，很容易發生一種情況，明明只是一個很小的需求異動，但是連帶影響到跟它有相依關係的部份，
	造成修改一小塊程式碼，導致很多地方都出錯，要花額外時間去修正被影響的程式碼。

	內聚:簡單來說，就是模組本身不需依賴其他模組，就能完成工作。
	當模組的內聚力越高，表示模組包含的物件或功能就越多，雖然提高了模組本身的獨立性，減少跟其他模組的耦合性，
	但也可能造成重覆程式碼，或違背單一職責原則的情況發生。

	低耦合、高內聚的目的，就是為了提升各模組功能的重用性、擴展性、維護性，就是為了達到盡可能不影響現有功能的前提下，
	完成需求異動的修改的目標，內聚力與耦合性就像天平的兩端，一邊增加，另一邊就必定減少。

4.程式設計的 6 項基本原則 SOLID +L
	1. Single Responsibility Principle(SRP) 單一職責原則

	2. Open/Close Principle (OCP) 開放/封閉原則

	3. Liskov Substitution Principle(LSP) 里氏替換原則

	4. Interface Segregation Principle(ISP) 介面隔離原則

	5. Dependency Inversion Principle (DIP) 依賴反轉原則

	6. Least Knowledge Principle (LKP) 最少知識原則(迪米特法則)

5.設計模式根據其目的（Purpose)分成 3 大類
	1.Creational 創建型模式
		此類型模式試圖根據適合的情況來決定建立物件，單純的物件創建常會導致一些設計問題或增加設計的複雜度，
		創建型模式則藉由控制物件的生成方式來解決這問題。

	2.Structural 結構型模式
		結構型模式整理既有的類別，並且將這些類別根據不同場合做一些適當的轉換，
		最終達到易使用、易維護、易修改、更加靈活···等等的效果。

	3.Behavioral 行為型模式
		物件之間的合作行為構成了程式最終的行為，物件之間若有設計良好的行為互動，不僅使得程式執行時更有效率，
		更可以讓物件的職責更為清晰、整個程式的動態結構（像是物件調度）更有彈性。

	參考資料 https://read01.com/zh-tw/e5M6d.html#.XMm53-gzZPY
			 https://openhome.cc/Gossip/DesignPattern/
			 https://ithelp.ithome.com.tw/articles/10191761
